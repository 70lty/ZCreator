import os
from datetime import datetime

def create_header(filename):
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    header = f"""
/*
 *    → This code is automatically generated by ZCreator © 2025
 *    → Developer : Zolty
 * 
 *    → All rights reserved.
 *    
 *    → File : {filename}
 *    → Created at : {current_time}
 *    → Last modified at : {current_time}
 */
"""
    return header

def create_file(path, content):
    with open(path, 'w', encoding='utf-8') as file:
        file.write(content)

def create_project_structure(project_name, dev_name, client, server, shared, config_sh, config_sv, create_main_table):
    addon_name = project_name.lower()
    addon_dir = f"{project_name}"  
    
    os.makedirs(f"{addon_dir}/lua/autorun", exist_ok=True)
    os.makedirs(f"{addon_dir}/lua/{addon_name}/client", exist_ok=True)
    os.makedirs(f"{addon_dir}/lua/{addon_name}/server", exist_ok=True)
    os.makedirs(f"{addon_dir}/lua/{addon_name}/shared", exist_ok=True)

    loader_filename = f"{dev_name.lower()}_{addon_name}_loader.lua"
    loader_content = create_header(loader_filename) + """
-- It loads the necessary files
"""
    if server:
        loader_content += f'include("lua/{addon_name}/server/sv_main.lua")\n'
    if shared:
        loader_content += f'include("lua/{addon_name}/shared/sh_main.lua")\n'
    if client:
        loader_content += f'AddCSLuaFile("lua/{addon_name}/client/cl_main.lua")\n'
    if shared:
        loader_content += f'AddCSLuaFile("lua/{addon_name}/shared/sh_main.lua")\n'
    if server:
        loader_content += f'include("lua/{addon_name}/server/sv_main.lua")\n'

    if create_main_table:
        loader_content += f"\n{dev_name.lower()}.{addon_name} = {dev_name.lower()}.{addon_name} or {{}}\n"
    
    create_file(f"{addon_dir}/lua/autorun/{loader_filename}", loader_content)

    if client:
        client_content = create_header("cl_main.lua") + """
-- Client-side code
"""
        create_file(f"{addon_dir}/lua/{addon_name}/client/cl_main.lua", client_content)

    if server:
        server_content = create_header("sv_main.lua") + """
-- Server-side code
"""
        create_file(f"{addon_dir}/lua/{addon_name}/server/sv_main.lua", server_content)
    
    if shared:
        shared_content = create_header("sh_main.lua") + """
-- Shared code (client and server)
"""
        create_file(f"{addon_dir}/lua/{addon_name}/shared/sh_main.lua", shared_content)
    
    if config_sv:
        config_sv_content = create_header("sv_config.lua") + """
-- Server-side configuration
-- Add your confidential settings here
"""
        create_file(f"{addon_dir}/lua/{addon_name}/server/sv_config.lua", config_sv_content)
    
    if config_sh:
        config_sh_content = create_header("sh_config.lua") + """
-- Shared configuration
"""
        create_file(f"{addon_dir}/lua/{addon_name}/shared/sh_config.lua", config_sh_content)

def ask_for_input(prompt, valid_answers):

    while True:
        response = input(prompt).strip().upper()
        if response in valid_answers:
            return response
        print(f"Invalid input. Please enter one of the following: {', '.join(valid_answers)}")

def ask_user_input():
    print("Welcome to the GMod Addon Creator!\n")

    project_name = input("Enter the project name: ").strip()
    dev_name = input("Enter the developer's name: ").strip()

    client = ask_for_input("Do you want client-side? (Y/N): ", ["Y", "N"]) == "Y"
    server = ask_for_input("Do you want server-side? (Y/N): ", ["Y", "N"]) == "Y"
    shared = ask_for_input("Do you want shared code? (Y/N): ", ["Y", "N"]) == "Y"

    config_sh = config_sv = False
    if server:
        config_sv = ask_for_input("Do you want a server-side config? (Y/N): ", ["Y", "N"]) == "Y"
    if shared:
        config_sh = ask_for_input("Do you want a shared config? (Y/N): ", ["Y", "N"]) == "Y"

    create_main_table = ask_for_input("Do you want to create the main table? (Y/N): ", ["Y", "N"]) == "Y"
    
    return project_name, dev_name, client, server, shared, config_sh, config_sv, create_main_table

def main():
    project_name, dev_name, client, server, shared, config_sh, config_sv, create_main_table = ask_user_input()
    
    print(f"\nCreating addon structure for '{project_name}' by {dev_name}...\n")
    
    create_project_structure(project_name, dev_name, client, server, shared, config_sh, config_sv, create_main_table)
    
    print(f"\nAddon structure has been successfully created !")

if __name__ == "__main__":
    main()
